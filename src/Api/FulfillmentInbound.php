<?php
/**
* This class is autogenerated by the Spapi class generator
* Date of generation: 2022-01-09
* Specification: https://github.com/amzn/selling-partner-api-models/blob/main/models/fulfillment-inbound-api-model/fulfillmentInboundV0.json
* Source MD5 signature: 0a39b3e7ccbe17011aa94d5044a962aa
*
*
* Selling Partner API for Fulfillment Inbound
* The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
*/
namespace DoubleBreak\Spapi\Api;
use DoubleBreak\Spapi\Client;

class FulfillmentInbound extends Client {

  /**
  * Operation getInboundGuidance
  *
  * @param array $queryParams
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace where the product would be stored.
  *    - *sellerSKUList* array - A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold. 
  *    - *aSINList* array - A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.
  *
  */
  public function getInboundGuidance($queryParams = [])
  {
    return $this->send("/fba/inbound/v0/itemsGuidance", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getInboundGuidanceAsync($queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/itemsGuidance", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation createInboundShipmentPlan
  *
  */
  public function createInboundShipmentPlan($body = [])
  {
    return $this->send("/fba/inbound/v0/plans", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  public function createInboundShipmentPlanAsync($body = [])
  {
    return $this->sendAsync("/fba/inbound/v0/plans", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation createInboundShipment
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function createInboundShipment($shipmentId, $body = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  public function createInboundShipmentAsync($shipmentId, $body = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation updateInboundShipment
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function updateInboundShipment($shipmentId, $body = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  public function updateInboundShipmentAsync($shipmentId, $body = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  /**
  * Operation getPreorderInfo
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  * @param array $queryParams
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace the shipment is tied to.
  *
  */
  public function getPreorderInfo($shipmentId, $queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/preorder", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getPreorderInfoAsync($shipmentId, $queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/preorder", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation confirmPreorder
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  * @param array $queryParams
  *    - *needByDate* string - Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace the shipment is tied to.
  *
  */
  public function confirmPreorder($shipmentId, $queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/preorder/confirm", [
      'method' => 'PUT',
      'query' => $queryParams,
    ]);
  }

  public function confirmPreorderAsync($shipmentId, $queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/preorder/confirm", [
      'method' => 'PUT',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getPrepInstructions
  *
  * @param array $queryParams
  *    - *shipToCountryCode* string - The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.
  *    - *sellerSKUList* array - A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
  *
  *Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
  *    - *aSINList* array - A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
  *
  *Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
  *
  */
  public function getPrepInstructions($queryParams = [])
  {
    return $this->send("/fba/inbound/v0/prepInstructions", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getPrepInstructionsAsync($queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/prepInstructions", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getTransportDetails
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function getTransportDetails($shipmentId)
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/transport", [
      'method' => 'GET',
    ]);
  }

  public function getTransportDetailsAsync($shipmentId)
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/transport", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation putTransportDetails
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function putTransportDetails($shipmentId, $body = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/transport", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  public function putTransportDetailsAsync($shipmentId, $body = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/transport", [
      'method' => 'PUT',
      'json' => $body
    ]);
  }

  /**
  * Operation voidTransport
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function voidTransport($shipmentId)
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/transport/void", [
      'method' => 'POST',
    ]);
  }

  public function voidTransportAsync($shipmentId)
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/transport/void", [
      'method' => 'POST',
    ]);
  }

  /**
  * Operation estimateTransport
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function estimateTransport($shipmentId)
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/transport/estimate", [
      'method' => 'POST',
    ]);
  }

  public function estimateTransportAsync($shipmentId)
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/transport/estimate", [
      'method' => 'POST',
    ]);
  }

  /**
  * Operation confirmTransport
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function confirmTransport($shipmentId)
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/transport/confirm", [
      'method' => 'POST',
    ]);
  }

  public function confirmTransportAsync($shipmentId)
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/transport/confirm", [
      'method' => 'POST',
    ]);
  }

  /**
  * Operation getLabels
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  * @param array $queryParams
  *    - *pageType* string - The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.
  *    - *labelType* string - The type of labels requested. 
  *    - *numberOfPackages* integer - The number of packages in the shipment.
  *    - *packageLabelsToPrint* array - A list of identifiers that specify packages for which you want package labels printed.
  *
  *Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.
  *    - *numberOfPallets* integer - The number of pallets in the shipment. This returns four identical labels for each pallet.
  *    - *pageSize* integer - The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.
  *    - *pageStartIndex* integer - The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.
  *
  */
  public function getLabels($shipmentId, $queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/labels", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getLabelsAsync($shipmentId, $queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/labels", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getBillOfLading
  *
  * @param string $shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
  *
  */
  public function getBillOfLading($shipmentId)
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/billOfLading", [
      'method' => 'GET',
    ]);
  }

  public function getBillOfLadingAsync($shipmentId)
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/billOfLading", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation getShipments
  *
  * @param array $queryParams
  *    - *shipmentStatusList* array - A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.
  *    - *shipmentIdList* array - A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
  *    - *lastUpdatedAfter* string - A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
  *    - *lastUpdatedBefore* string - A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
  *    - *queryType* string - Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.
  *    - *nextToken* string - A string token returned in the response to your previous request.
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace where the product would be stored.
  *
  */
  public function getShipments($queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipments", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getShipmentsAsync($queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getShipmentItemsByShipmentId
  *
  * @param string $shipmentId A shipment identifier used for selecting items in a specific inbound shipment.
  *
  * @param array $queryParams
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace where the product would be stored.
  *
  */
  public function getShipmentItemsByShipmentId($shipmentId, $queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipments/{$shipmentId}/items", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getShipmentItemsByShipmentIdAsync($shipmentId, $queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipments/{$shipmentId}/items", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
  * Operation getShipmentItems
  *
  * @param array $queryParams
  *    - *lastUpdatedAfter* string - A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
  *    - *lastUpdatedBefore* string - A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
  *    - *queryType* string - Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.
  *    - *nextToken* string - A string token returned in the response to your previous request.
  *    - *marketplaceId* string - A marketplace identifier. Specifies the marketplace where the product would be stored.
  *
  */
  public function getShipmentItems($queryParams = [])
  {
    return $this->send("/fba/inbound/v0/shipmentItems", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  public function getShipmentItemsAsync($queryParams = [])
  {
    return $this->sendAsync("/fba/inbound/v0/shipmentItems", [
      'method' => 'GET',
      'query' => $queryParams,
    ]);
  }

  /**
   * Operation listInboundPlans
   *
   * @param array $queryParams
   *    - *pageSize* integer
   *    - *paginationToken* string
   *    - *status* string
   *    - *sortBy* string
   *    - *sortOrder* string
   *
   */
  public function listInboundPlans($queryParams = [])
  {
      return $this->send("/inbound/fba/2024-03-20/inboundPlans", [
          'method' => 'GET',
          'query' => $queryParams,
      ]);
  }

  public function listInboundPlansAsync($queryParams = [])
  {
      return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans", [
          'method' => 'GET',
          'query' => $queryParams,
      ]);
  }

    /**
     * Operation createInboundPlan
     *
     * @param array $queryParams
     *    - *destinationMarketplaces* string
     *    - *items* array
     *    - *name* string
     *    - *sourceAddress* array
     *
     */
  public function createInboundPlan($queryParams = [])
  {
      return $this->send("/inbound/fba/2024-03-20/inboundPlans", [
          'method' => 'POST',
          'query' => $queryParams,
      ]);
  }

  public function createInboundPlanAsync($queryParams = [])
  {
      return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans", [
          'method' => 'POST',
          'query' => $queryParams,
      ]);
  }

    /**
     * Operation getInboundPlan
     *
     * @param array $queryParams
     *
     */
    public function getInboundPlan($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getInboundPlanAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listInboundPlanBoxes
     *
     * @param array $queryParams
     *
     */
    public function listInboundPlanBoxes($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listInboundPlanBoxesAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation cancelInboundPlan
     *
     * @param array $queryParams
     *
     */
    public function cancelInboundPlan($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/cancellation", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function cancelInboundPlanAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/cancellation", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listInboundPlanItems
     *
     * @param array $queryParams
     *
     */
    public function listInboundPlanItems($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listInboundPlanItemsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation updateInboundPlanName
     *
     * @param array $queryParams
     *
     */
    public function updateInboundPlanName($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/name", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function updateInboundPlanNameAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/name", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listPackingGroupBoxes
     *
     * @param array $queryParams
     *
     */
    public function listPackingGroupBoxes($inboundPlanId, $packingGroupId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingGroups/{$packingGroupId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listPackingGroupBoxesAsync($inboundPlanId, $packingGroupId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingGroups/{$packingGroupId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listPackingGroupItems
     *
     * @param array $queryParams
     *
     */
    public function listPackingGroupItems($inboundPlanId, $packingGroupId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingGroups/{$packingGroupId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listPackingGroupItemsAsync($inboundPlanId, $packingGroupId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingGroups/{$packingGroupId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation setPackingInformation
     *
     * @param array $queryParams
     *
     */
    public function setPackingInformation($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingInformation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function setPackingInformationAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingInformation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listPackingOptions
     *
     * @param array $queryParams
     *
     */
    public function listPackingOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listPackingOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generatePackingOptions
     *
     * @param array $queryParams
     *
     */
    public function generatePackingOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generatePackingOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation confirmPackingOption
     *
     * @param array $queryParams
     *
     */
    public function confirmPackingOption($inboundPlanId, $packingOptionId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions/{$packingOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function confirmPackingOptionAsync($inboundPlanId, $packingOptionId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/packingOptions/{$packingOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listInboundPlanPallets
     *
     * @param array $queryParams
     *
     */
    public function listInboundPlanPallets($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/pallets", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listInboundPlanPalletsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/pallets", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listPlacementOptions
     *
     * @param array $queryParams
     *
     */
    public function listPlacementOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listPlacementOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generatePlacementOptions
     *
     * @param array $queryParams
     *
     */
    public function generatePlacementOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generatePlacementOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation confirmPlacementOption
     *
     * @param array $queryParams
     *
     */
    public function confirmPlacementOption($inboundPlanId, $placementOptionId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions/{$placementOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function confirmPlacementOptionAsync($inboundPlanId, $placementOptionId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/placementOptions/{$placementOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation getShipment
     *
     * @param array $queryParams
     *
     */
    public function getShipment($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getShipmentAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listShipmentBoxes
     *
     * @param array $queryParams
     *
     */
    public function listShipmentBoxes($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listShipmentBoxesAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/boxes", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listShipmentContentUpdatePreviews
     *
     * @param array $queryParams
     *
     */
    public function listShipmentContentUpdatePreviews($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listShipmentContentUpdatePreviewsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generateShipmentContentUpdatePreviews
     *
     * @param array $queryParams
     *
     */
    public function generateShipmentContentUpdatePreviews($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generateShipmentContentUpdatePreviewsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation getShipmentContentUpdatePreview
     *
     * @param array $queryParams
     *
     */
    public function getShipmentContentUpdatePreview($inboundPlanId, $shipmentId, $contentUpdatePreviewId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews/{$contentUpdatePreviewId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getShipmentContentUpdatePreviewAsync($inboundPlanId, $shipmentId, $contentUpdatePreviewId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews/{$contentUpdatePreviewId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation confirmShipmentContentUpdatePreview
     *
     * @param array $queryParams
     *
     */
    public function confirmShipmentContentUpdatePreview($inboundPlanId, $shipmentId, $contentUpdatePreviewId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews/{$contentUpdatePreviewId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function confirmShipmentContentUpdatePreviewAsync($inboundPlanId, $shipmentId, $contentUpdatePreviewId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/contentUpdatePreviews/{$contentUpdatePreviewId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation getDeliveryChallanDocument
     *
     * @param array $queryParams
     *
     */
    public function getDeliveryChallanDocument($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryChallanDocument", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getDeliveryChallanDocumentAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryChallanDocument", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listDeliveryWindowOptions
     *
     * @param array $queryParams
     *
     */
    public function listDeliveryWindowOptions($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generateDeliveryWindowOptions
     *
     * @param array $queryParams
     *
     */
    public function generateDeliveryWindowOptions($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generateDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation confirmDeliveryWindowOptions
     *
     * @param array $queryParams
     *
     */
    public function confirmDeliveryWindowOptions($inboundPlanId, $shipmentId, $deliveryWindowOptionId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions/{$deliveryWindowOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function confirmDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId, $deliveryWindowOptionId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/deliveryWindowOptions/{$deliveryWindowOptionId}/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listShipmentItems
     *
     * @param array $queryParams
     *
     */
    public function listShipmentItems($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listShipmentItemsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/items", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation updateShipmentName
     *
     * @param array $queryParams
     *
     */
    public function updateShipmentName($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/name", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function updateShipmentNameAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/name", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listShipmentPallets
     *
     * @param array $queryParams
     *
     */
    public function listShipmentPallets($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/pallets", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listShipmentPalletsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/pallets", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation cancelSelfShipAppointment
     *
     * @param array $queryParams
     *
     */
    public function cancelSelfShipAppointment($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentCancellation", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function cancelSelfShipAppointmentAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentCancellation", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation getSelfShipAppointmentSlots
     *
     * @param array $queryParams
     *
     */
    public function getSelfShipAppointmentSlots($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getSelfShipAppointmentSlotsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generateSelfShipAppointmentSlots
     *
     * @param array $queryParams
     *
     */
    public function generateSelfShipAppointmentSlots($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generateSelfShipAppointmentSlotsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation scheduleSelfShipAppointment
     *
     * @param array $queryParams
     *
     */
    public function scheduleSelfShipAppointment($inboundPlanId, $shipmentId, $slotId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots/{$slotId}/schedule", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function scheduleSelfShipAppointmentAsync($inboundPlanId, $shipmentId, $slotId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/selfShipAppointmentSlots/{$slotId}/schedule", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation updateShipmentSourceAddress
     *
     * @param array $queryParams
     *
     */
    public function updateShipmentSourceAddress($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/sourceAddress", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function updateShipmentSourceAddressAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/sourceAddress", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation updateShipmentTrackingDetails
     *
     * @param array $queryParams
     *
     */
    public function updateShipmentTrackingDetails($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/trackingDetails", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function updateShipmentTrackingDetailsAsync($inboundPlanId, $shipmentId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/shipments/{$shipmentId}/trackingDetails", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listTransportationOptions
     *
     * @param array $queryParams
     *
     */
    public function listTransportationOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listTransportationOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation generateTransportationOptions
     *
     * @param array $queryParams
     *
     */
    public function generateTransportationOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function generateTransportationOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation confirmTransportationOptions
     *
     * @param array $queryParams
     *
     */
    public function confirmTransportationOptions($inboundPlanId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function confirmTransportationOptionsAsync($inboundPlanId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/inboundPlans/{$inboundPlanId}/transportationOptions/confirmation", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation listItemComplianceDetails
     *
     * @param array $queryParams
     *
     */
    public function listItemComplianceDetails($queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/items/compliance", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function listItemComplianceDetailsAsync($queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/items/compliance", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation updateItemComplianceDetails
     *
     * @param array $queryParams
     *
     */
    public function updateItemComplianceDetails($queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/items/compliance", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    public function updateItemComplianceDetailsAsync($queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/items/compliance", [
            'method' => 'PUT',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation createMarketplaceItemLabels
     *
     * @param array $queryParams
     *
     */
    public function createMarketplaceItemLabels($queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/items/labels", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    public function createMarketplaceItemLabelsAsync($queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/items/labels", [
            'method' => 'POST',
            'query' => $queryParams,
        ]);
    }

    /**
     * Operation getInboundOperationStatus
     *
     * @param array $queryParams
     *
     */
    public function getInboundOperationStatus($operationId, $queryParams = [])
    {
        return $this->send("/inbound/fba/2024-03-20/operations/{$operationId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }

    public function getInboundOperationStatusAsync($operationId, $queryParams = [])
    {
        return $this->sendAsync("/inbound/fba/2024-03-20/operations/{$operationId}", [
            'method' => 'GET',
            'query' => $queryParams,
        ]);
    }
}
